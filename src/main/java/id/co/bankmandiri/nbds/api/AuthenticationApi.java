/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package id.co.bankmandiri.nbds.api;

import id.co.bankmandiri.nbds.model.BranchTellerCounterResponse;
import id.co.bankmandiri.nbds.model.FingerprintRequest;
import id.co.bankmandiri.nbds.model.FingerprintResponse;
import id.co.bankmandiri.nbds.model.GetTellerUserResponse;
import id.co.bankmandiri.nbds.model.LoginInitializationResponse;
import id.co.bankmandiri.nbds.model.LoginRequest;
import id.co.bankmandiri.nbds.model.LoginResponse;
import id.co.bankmandiri.nbds.model.LogoutRequest;
import id.co.bankmandiri.nbds.model.MenuDTORequest;
import id.co.bankmandiri.nbds.model.MenuDTOResponse;
import id.co.bankmandiri.nbds.model.RoleDTORequest;
import id.co.bankmandiri.nbds.model.RoleDTOResponse;
import id.co.bankmandiri.nbds.model.RoleMenuDTORequest;
import id.co.bankmandiri.nbds.model.RoleMenuDTOResponse;
import id.co.bankmandiri.nbds.model.UserBranchResponse;
import id.co.bankmandiri.nbds.model.UserBranchRoleDTORequest;
import id.co.bankmandiri.nbds.model.UserBranchRoleDTOResponse;
import id.co.bankmandiri.nbds.model.UserIdRequest;
import id.co.bankmandiri.nbds.model.VerificationRequest;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@Validated
@Api(value = "authentication", description = "the authentication API")
public interface AuthenticationApi {
    

    @ApiOperation(value = "addNewMenu", nickname = "addNewMenuUsingPOST", notes = "", response = MenuDTOResponse.class, tags={ "menu-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MenuDTOResponse.class),
        @ApiResponse(code = 404, message = "Menu Not Available", response = MenuDTOResponse.class) })
    @RequestMapping(value = "/authentication/v1/menu",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<MenuDTOResponse> addNewMenuUsingPOST(@ApiParam(value = "input" ,required=true )  @Valid @RequestBody MenuDTORequest menuDTORequest); 


    @ApiOperation(value = "addNewMenu", nickname = "addNewMenuUsingPOST1", notes = "", response = RoleDTOResponse.class, tags={ "role-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RoleDTOResponse.class),
        @ApiResponse(code = 500, message = "Failure Adding Role", response = RoleDTOResponse.class) })
    @RequestMapping(value = "/authentication/v1/role",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<RoleDTOResponse> addNewMenuUsingPOST1(@ApiParam(value = "input" ,required=true )  @Valid @RequestBody RoleDTORequest roleDTORequest); 


    @ApiOperation(value = "addNewMenu", nickname = "addNewMenuUsingPOST2", notes = "", response = RoleMenuDTOResponse.class, tags={ "role-menu-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RoleMenuDTOResponse.class),
        @ApiResponse(code = 500, message = "Failure mapping rule and menu", response = RoleMenuDTOResponse.class) })
    @RequestMapping(value = "/authentication/v1/role-menu",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<RoleMenuDTOResponse> addNewMenuUsingPOST2(@ApiParam(value = "input" ,required=true )  @Valid @RequestBody RoleMenuDTORequest roleMenuDTORequest); 


    @ApiOperation(value = "addNewMenu", nickname = "addNewMenuUsingPOST3", notes = "", response = UserBranchRoleDTOResponse.class, tags={ "user-branch-role-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserBranchRoleDTOResponse.class),
        @ApiResponse(code = 500, message = "Failure mapping User Branch and Role", response = UserBranchRoleDTOResponse.class) })
    @RequestMapping(value = "/authentication/v1/user-branch-role",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<UserBranchRoleDTOResponse> addNewMenuUsingPOST3(@ApiParam(value = "input" ,required=true )  @Valid @RequestBody UserBranchRoleDTORequest userBranchRoleDTORequest); 


    @ApiOperation(value = "fingerprint", nickname = "fingerprintUsingPOST", notes = "", response = FingerprintResponse.class, tags={ "authentication-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FingerprintResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = FingerprintResponse.class),
        @ApiResponse(code = 403, message = "Forbidden", response = FingerprintResponse.class) })
    @RequestMapping(value = "/authentication/v1/fingerprint",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<FingerprintResponse> fingerprintUsingPOST(@ApiParam(value = "input" ,required=true )  @Valid @RequestBody FingerprintRequest fingerprintRequest); 


    @ApiOperation(value = "getLoggedInTeller", nickname = "getLoggedInTellerUsingGET", notes = "", response = BranchTellerCounterResponse.class, tags={ "user-branch-role-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = BranchTellerCounterResponse.class),
        @ApiResponse(code = 404, message = "Mapping not found", response = BranchTellerCounterResponse.class),
        @ApiResponse(code = 500, message = "Internal Error", response = BranchTellerCounterResponse.class) })
    @RequestMapping(value = "/authentication/v1/user-branch-role",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<BranchTellerCounterResponse> getLoggedInTellerUsingGET(@NotNull @ApiParam(value = "branchNumber", required = true) @Valid @RequestParam(value = "branchNumber", required = true) String branchNumber,@ApiParam(value = "loginStatus") @Valid @RequestParam(value = "loginStatus", required = false) Boolean loginStatus,@ApiParam(value = "role") @Valid @RequestParam(value = "role", required = false) String role); 


    @ApiOperation(value = "getTellerList", nickname = "getTellerListUsingGET", notes = "", response = UserBranchResponse.class, tags={ "user-branch-role-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserBranchResponse.class),
        @ApiResponse(code = 404, message = "Mapping Not Found", response = UserBranchResponse.class),
        @ApiResponse(code = 500, message = "Internal Error", response = UserBranchResponse.class) })
    @RequestMapping(value = "/authentication/v1/user-branch",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserBranchResponse> getTellerListUsingGET(@NotNull @ApiParam(value = "Branch Number", required = true) @Valid @RequestParam(value = "branchNumber", required = true) String branchNumber,@ApiParam(value = "loginStatus") @Valid @RequestParam(value = "loginStatus", required = false) Boolean loginStatus,@ApiParam(value = "page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "role") @Valid @RequestParam(value = "role", required = false) String role,@ApiParam(value = "search") @Valid @RequestParam(value = "search", required = false) String search); 


    @ApiOperation(value = "getTellerUser", nickname = "getTellerUserUsingGET", notes = "", response = GetTellerUserResponse.class, tags={ "get-teller-user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = GetTellerUserResponse.class),
        @ApiResponse(code = 404, message = "Teller or User Not Found", response = GetTellerUserResponse.class),
        @ApiResponse(code = 500, message = "Internal Error", response = GetTellerUserResponse.class) })
    @RequestMapping(value = "/authentication/v1/user/{userId}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetTellerUserResponse> getTellerUserUsingGET(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId); 


    @ApiOperation(value = "login", nickname = "loginUsingPOST", notes = "", response = Object.class, tags={ "authentication-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Object.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Object.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Object.class) })
    @RequestMapping(value = "/authentication/v1/login",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Object> loginUsingPOST(@ApiParam(value = "authenticationRequest" ,required=true )  @Valid @RequestBody LoginRequest loginRequest); 


    @ApiOperation(value = "logout", nickname = "logoutUsingPOST", notes = "", response = Object.class, tags={ "authentication-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Object.class) })
    @RequestMapping(value = "/authentication/v1/logout",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Object> logoutUsingPOST(@ApiParam(value = "request" ,required=true )  @Valid @RequestBody LogoutRequest logoutRequest); 


    @ApiOperation(value = "resendOtp", nickname = "resendOtpUsingPOST", notes = "", response = LoginInitializationResponse.class, tags={ "authentication-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LoginInitializationResponse.class) })
    @RequestMapping(value = "/authentication/v1/resend-otp",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<LoginInitializationResponse> resendOtpUsingPOST(@ApiParam(value = "request" ,required=true )  @Valid @RequestBody UserIdRequest userIdRequest); 


    @ApiOperation(value = "verify", nickname = "verifyUsingPOST", notes = "", response = LoginResponse.class, tags={ "authentication-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LoginResponse.class),
        @ApiResponse(code = 404, message = "Teller or User Not Found", response = LoginResponse.class),
        @ApiResponse(code = 500, message = "Internal Error", response = LoginResponse.class) })
    @RequestMapping(value = "/authentication/v1/verify",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<LoginResponse> verifyUsingPOST(@ApiParam(value = "verificationRequest" ,required=true )  @Valid @RequestBody VerificationRequest verificationRequest); 

}
